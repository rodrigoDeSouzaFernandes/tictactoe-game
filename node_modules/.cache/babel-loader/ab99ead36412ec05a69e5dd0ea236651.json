{"ast":null,"code":"var _jsxFileName = \"/home/rodrigo/rodrigoDeSouzaFernandes/projetos-pessoais/tictactoe-game/src/TicTacToe.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport '../src/styles/tictactoe.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TicTacToe() {\n  _s();\n\n  const emptyBoard = Array(9).fill('');\n  const [board, setBoard] = useState(emptyBoard);\n  const [currentPlayer, setCurrentPlayer] = useState('x');\n  const [winner, setWinner] = useState(null);\n  console.log(winner);\n\n  const handleCellClick = index => {\n    if (winner) return null;\n    if (board[index] !== '') return null;\n    setBoard(board.map((item, i) => i === index ? currentPlayer : item));\n    setCurrentPlayer(currentPlayer === 'x' ? 'o' : 'x');\n  };\n\n  const checkWinner = () => {\n    const possibleWaysToWin = [[board[0], board[1], board[2]], [board[3], board[4], board[5]], [board[6], board[7], board[8]], [board[0], board[3], board[6]], [board[1], board[4], board[7]], [board[2], board[5], board[8]], [board[0], board[4], board[8]], [board[2], board[4], board[6]]];\n    possibleWaysToWin.forEach(cells => {\n      if (cells.every(cell => cell === \"o\")) setWinner('o');\n      if (cells.every(cell => cell === \"x\")) setWinner('x');\n    });\n    checkDraw();\n  };\n\n  const checkDraw = () => {\n    if (board.every(item => item !== '')) {\n      setWinner('E');\n    }\n  };\n\n  useEffect(checkWinner, [board]);\n\n  const resetGame = () => {\n    setCurrentPlayer('x');\n    setBoard(emptyBoard);\n    setWinner(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Jogo da velha\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `board ${winner ? 'game-over' : ''}`,\n      children: board.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `cell ${item}`,\n        onClick: () => handleCellClick(index),\n        children: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), winner && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"restart-game\",\n      children: [winner === 'E' ? /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"winner-message\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: winner,\n          children: \"Deu Velha!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"winner-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: winner,\n          children: winner\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), \" venceu!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"restart-btn\",\n        onClick: resetGame,\n        children: \"Recome\\xE7ar jogo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TicTacToe, \"5E91tbaxszE3BgL/lJpaJm0rjuA=\");\n\n_c = TicTacToe;\nexport default TicTacToe;\n\nvar _c;\n\n$RefreshReg$(_c, \"TicTacToe\");","map":{"version":3,"sources":["/home/rodrigo/rodrigoDeSouzaFernandes/projetos-pessoais/tictactoe-game/src/TicTacToe.js"],"names":["React","useState","useEffect","TicTacToe","emptyBoard","Array","fill","board","setBoard","currentPlayer","setCurrentPlayer","winner","setWinner","console","log","handleCellClick","index","map","item","i","checkWinner","possibleWaysToWin","forEach","cells","every","cell","checkDraw","resetGame"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport '../src/styles/tictactoe.css'\nfunction TicTacToe() {\n  const emptyBoard = Array(9).fill('');\n  const [board, setBoard] = useState(emptyBoard)\n  const [currentPlayer, setCurrentPlayer] = useState('x')\n  const [winner, setWinner] = useState(null)\n  console.log(winner)\n\n  const handleCellClick = (index) => {\n    if(winner) return null;\n    if(board[index] !== '') return null;\n\n    setBoard(\n      board.map((item, i) => i === index ? currentPlayer : item)\n    )\n\n    setCurrentPlayer(\n      currentPlayer === 'x' ? 'o' : 'x'\n    )\n  }\n\n  const checkWinner = () => {\n    const possibleWaysToWin = [\n      [board[0], board[1], board[2]],\n      [board[3], board[4], board[5]],\n      [board[6], board[7], board[8]],\n      [board[0], board[3], board[6]],\n      [board[1], board[4], board[7]],\n      [board[2], board[5], board[8]],\n      [board[0], board[4], board[8]],\n      [board[2], board[4], board[6]],\n    ];\n\n    possibleWaysToWin.forEach((cells) => {\n      if(cells.every(cell => cell === \"o\")) setWinner('o')\n      if(cells.every(cell => cell === \"x\")) setWinner('x')\n    });\n\n    checkDraw();\n  }\n\n  const checkDraw = () => {\n    if(board.every(item => item !== '')) {\n      setWinner('E')\n    }\n  }\n\n  useEffect(checkWinner, [board])\n\n  const resetGame = () => {\n    setCurrentPlayer('x');\n    setBoard(emptyBoard);\n    setWinner(null);\n  }\n\n  return (\n    <main >\n      <h1 className=\"title\">Jogo da velha</h1>\n      <div className={`board ${winner ? 'game-over' : ''}`}>\n        {board.map((item, index) => (\n            <div \n            key={index}\n            className={`cell ${item}`}\n            onClick={() => handleCellClick(index)}\n            >\n              {item}\n            </div>\n          )\n        )}\n      </div>\n      \n      {winner &&\n        <div className=\"restart-game\">\n          {winner === 'E' ? (\n            <h2 className=\"winner-message\">\n            <span className={winner}>Deu Velha!</span>\n          </h2>\n          ) : (\n          <h2 className=\"winner-message\">\n            <span className={winner}>{winner}</span> venceu!\n          </h2>\n          )}\n          \n          <button className=\"restart-btn\" onClick={resetGame}>Recome√ßar jogo</button>\n        </div>\n      }\n    </main>\n  );\n}\n\nexport default TicTacToe;\n"]},"metadata":{},"sourceType":"module"}