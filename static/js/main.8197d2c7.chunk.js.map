{"version":3,"sources":["TicTacToe.js","index.js"],"names":["TicTacToe","emptyBoard","Array","fill","useState","board","setBoard","currentPlayer","setCurrentPlayer","winner","setWinner","x","o","score","setScore","useEffect","forEach","cells","every","cell","item","className","map","index","onClick","i","handleCellClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAgIeA,MA9Hf,WACE,IAAMC,EAAaC,MAAM,GAAGC,KAAK,IAMjC,EAA0BC,mBAASH,GAAnC,mBAAOI,EAAP,KAAcC,EAAd,KACA,EAA0CF,mBAAS,KAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAA4BJ,mBAAS,MAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAA0BN,mBARL,CACnBO,EAAG,EACHC,EAAG,IAML,mBAAOC,EAAP,KAAcC,EAAd,KAyDA,OATAC,qBA3BoB,WACQ,CACxB,CAACV,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAC3B,CAACA,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAC3B,CAACA,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAC3B,CAACA,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAC3B,CAACA,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAC3B,CAACA,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAC3B,CAACA,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAC3B,CAACA,EAAM,GAAIA,EAAM,GAAIA,EAAM,KAGXW,SAAQ,SAACC,GACtBA,EAAMC,OAAM,SAAAC,GAAI,MAAa,MAATA,KAAeT,EAAU,KACxCO,EAAMC,OAAM,SAAAC,GAAI,MAAa,MAATA,MAAeT,EAAU,QAnBpDL,EAAMa,OAAM,SAAAE,GAAI,MAAa,KAATA,MACrBV,EAAU,OA+BS,CAACL,IACxBU,qBARiB,WACbD,EAAS,2BACJD,GADG,kBAELJ,EAASI,EAAMJ,IAAW,OAKb,CAACA,IASnB,qCACA,iCACE,oBAAIY,UAAU,QAAd,8BAEF,iCACE,sBAAKA,UAAU,mBAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,0CACA,sBAAMA,UAAWd,EAAjB,SAAiCA,OAEnC,sBAAKc,UAAU,SAAf,UACE,wCACA,uBAAMA,UAAU,IAAhB,eAAsB,+BAAOR,EAAMF,OAFrC,KAIE,uBAAMU,UAAU,IAAhB,UAAoB,+BAAOR,EAAMD,IAAjC,WAEF,qBAAKS,UAAU,2BAAf,SACE,qDAIJ,qBAAKA,UAAS,gBAAWZ,EAAS,YAAc,IAAhD,SACGJ,EAAMiB,KAAI,SAACF,EAAMG,GAAP,OACP,qBAEAF,UAAS,eAAUD,GACnBI,QAAS,kBAlFK,SAACD,GACvB,OAAGd,GACiB,KAAjBJ,EAAMkB,GADS,MAGlBjB,EACED,EAAMiB,KAAI,SAACF,EAAMK,GAAP,OAAaA,IAAMF,EAAQhB,EAAgBa,WAGvDZ,EACoB,MAAlBD,EAAwB,IAAM,MAyETmB,CAAgBH,IAH/B,SAKGH,GAJEG,QAUVd,GACC,sBAAKY,UAAU,eAAf,UACc,MAAXZ,EACC,oBAAIY,UAAU,iBAAd,SACA,sBAAMA,UAAWZ,EAAjB,0BAGF,qBAAIY,UAAU,iBAAd,UACE,sBAAMA,UAAWZ,EAAjB,SAA0BA,IAD5B,cAKA,wBAAQY,UAAU,cAAcG,QArDtB,WAChBhB,EAAiB,KACjBF,EAASL,GACTS,EAAU,OAkDJ,kCAGJ,sBAAKW,UAAU,wBAAf,UACI,0CACA,sBAAMA,UAAWd,EAAjB,SAAiCA,cCrH3CoB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8197d2c7.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport '../src/styles/tictactoe.css'\nfunction TicTacToe() {\n  const emptyBoard = Array(9).fill('');\n  const initialScore = {\n    x: 0,\n    o: 0,\n  }\n\n  const [board, setBoard] = useState(emptyBoard)\n  const [currentPlayer, setCurrentPlayer] = useState('x')\n  const [winner, setWinner] = useState(null)\n  const [score, setScore] = useState(initialScore)\n\n  const handleCellClick = (index) => {\n    if(winner) return null;\n    if(board[index] !== '') return null;\n\n    setBoard(\n      board.map((item, i) => i === index ? currentPlayer : item)\n    )\n\n    setCurrentPlayer(\n      currentPlayer === 'x' ? 'o' : 'x'\n    )\n  }\n\n    const checkDraw = () => {\n    if(board.every(item => item !== '')) {\n      setWinner('E')\n    }\n  }\n\n  const checkWinner = () => {\n    const possibleWaysToWin = [\n      [board[0], board[1], board[2]],\n      [board[3], board[4], board[5]],\n      [board[6], board[7], board[8]],\n      [board[0], board[3], board[6]],\n      [board[1], board[4], board[7]],\n      [board[2], board[5], board[8]],\n      [board[0], board[4], board[8]],\n      [board[2], board[4], board[6]],\n    ];\n\n    possibleWaysToWin.forEach((cells) => {\n      if(cells.every(cell => cell === \"o\")) setWinner('o');\n      else if(cells.every(cell => cell === \"x\")) setWinner('x');\n    });\n\n    checkDraw();\n  }\n\n  const addScore = () => {\n      setScore({\n        ...score,\n        [winner]: score[winner] += 1,\n      })\n  }\n\n  useEffect(checkWinner, [board]);\n  useEffect(addScore, [winner])\n\n  const resetGame = () => {\n    setCurrentPlayer('x');\n    setBoard(emptyBoard);\n    setWinner(null);\n  }\n\n  return (\n    <>\n    <header>\n      <h1 className=\"title\">Jogo da velha#</h1>\n    </header>\n    <main >\n      <div className='responsive-score'>\n        <div className=\"current-player\">\n          <h2>Jogador:</h2>\n          <span className={currentPlayer}>{currentPlayer}</span>\n        </div>\n        <div className=\"placar\">\n          <h2>PLACAR</h2>\n          <span className='x'>X <span>{score.x}</span></span>\n          vs\n          <span className='o'><span>{score.o}</span> O</span>\n        </div>\n        <div className=\"current-player res-title\">\n          <h2>Jogo da velha#</h2>\n        </div>\n      </div>\n      \n      <div className={`board ${winner ? 'game-over' : ''}`}>\n        {board.map((item, index) => (\n            <div \n            key={index}\n            className={`cell ${item}`}\n            onClick={() => handleCellClick(index)}\n            >\n              {item}\n            </div>\n          )\n        )}\n      </div>\n      \n      {winner &&\n        <div className=\"restart-game\">\n          {winner === 'E' ? (\n            <h2 className=\"winner-message\">\n            <span className={winner}>Deu Velha!</span>\n          </h2>\n          ) : (\n          <h2 className=\"winner-message\">\n            <span className={winner}>{winner}</span> venceu!\n          </h2>\n          )}\n          \n          <button className=\"restart-btn\" onClick={resetGame}>Recome√ßar jogo</button>\n        </div>\n      }\n      <div className=\"current-player mobile\">\n          <h2>Jogador:</h2>\n          <span className={currentPlayer}>{currentPlayer}</span>\n        </div>\n    </main>\n    </>\n  );\n}\n\nexport default TicTacToe;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TicTacToe from './TicTacToe';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TicTacToe />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}